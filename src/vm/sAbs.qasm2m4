;#
;# Copyright (c) 2016 Idein Inc. ( http://idein.jp/ )
;# All rights reserved.
;#
;# This software is licensed under a Modified (3-Clause) BSD License.
;# You should have received a copy of this license along with this
;# software. If not, contact the copyright holder above.
;#

;# REG_ASSIGN(MACRO_TO_ASSIGN, CNT_BASENAME, REG_PREFIX)
define(`REG_ASSIGN',`
    ifelse(`$#', `3', , `
        errprint(`$0: Invalid the number of the aguments')
        m4exit(`1')
    ')
    ifelse(`$1', `', `
        errprint(`$0: Empty macro name')
        m4exit(`1')
    ')
    ifelse(`$2', `', `
        errprint(`$0: Empty suffix')
        m4exit(`1')
    ')
    ifelse(`$3', `', `
        errprint(`$0: Empty suffix')
        m4exit(`1')
    ')
    ifdef(`$2_CNT', , `define(`$2_CNT', `0')')
    ifelse(eval($2_CNT >= 32), `1', `
        errprint(`$0: Register spilled')
        m4exit(`1')
    ')
    define(`$1', `$3'$2_CNT)
    define(`$2_CNT', incr($2_CNT))
')

;# R_ASSIGN(MACRO_TO_ASSIGN)
define(`R_ASSIGN', `REG_ASSIGN($1, R, r)')

;# RA_ASSIGN(MACRO_TO_ASSIGN)
define(`RA_ASSIGN', `REG_ASSIGN($1, RA, ra)')

;# RB_ASSIGN(MACRO_TO_ASSIGN)
define(`RB_ASSIGN', `REG_ASSIGN($1, RB, rb)')


R_ASSIGN(TMP0_R)
RA_ASSIGN(N_RA)
RB_ASSIGN(MEM_SRC_RB)
RA_ASSIGN(MEM_DST_RA)
RA_ASSIGN(C_1024_RA)
RB_ASSIGN(C_1024_RB)
RA_ASSIGN(VPM_DMA_LOAD_SETUP_0_RA)
RA_ASSIGN(VPM_DMA_LOAD_SETUP_16_RA)
RA_ASSIGN(VPM_DMA_LOAD_SETUP_32_RA)
RB_ASSIGN(VPM_DMA_LOAD_SETUP_32_RB)
RA_ASSIGN(VPM_DMA_STORE_SETUP_0_RA)
RA_ASSIGN(VPM_DMA_STORE_SETUP_16_RA)
RA_ASSIGN(VPM_DMA_STORE_SETUP_32_RA)
;# As for 16x16 VPM R/W, they are symmetric.
RA_ASSIGN(VPM_WRITE_SETUP_0_RA)
RA_ASSIGN(VPM_WRITE_SETUP_16_RA)
RA_ASSIGN(VPM_WRITE_SETUP_32_RA)

changequote(`[', `]')

alu cond_add=al op_add=or waddr_add=N_RA raddr_a=uniform_read add_a=ra add_b=ra
alu cond_add=al op_add=or waddr_add=MEM_SRC_RB ws=1 raddr_a=uniform_read add_a=ra add_b=ra
alu cond_add=al op_add=or waddr_add=MEM_DST_RA raddr_a=uniform_read add_a=ra add_b=ra
li cond_add=al cond_mul=al waddr_add=C_1024_RA waddr_mul=C_1024_RB imm=1024

;                                                        + DMA load setup
;                                                        | + width = 32bit
;                                                        | |   + mpitch = 8 * 2 ^ 3 = 64 = 16 * (32 / 8)
;                                                        | |   |    + rowlen = 16
;                                                        | |   |    |    + nrows = 16
;                                                        | |   |    |    |    + vpitch = 1
;                                                        | |   |    |    |    |    + 0:horiz 1:vert
;                                                        | |   |    |    |    |    |    + addr_y = 0
;                                                        | |   |    |    |    |    |    |      + addr_x = 0
li cond_add=al waddr_add=VPM_DMA_LOAD_SETUP_0_RA imm=`0b_1_000_0011_0000_0000_0001_0__0_000000_0000`

;                                                         + DMA load setup
;                                                         | + width = 32bit
;                                                         | |   + mpitch = 8 * 2 ^ 3 = 64 = 16 * (32 / 8)
;                                                         | |   |    + rowlen = 16
;                                                         | |   |    |    + nrows = 16
;                                                         | |   |    |    |    + vpitch = 1
;                                                         | |   |    |    |    |    + 0:horiz 1:vert
;                                                         | |   |    |    |    |    |    + addr_y = 16
;                                                         | |   |    |    |    |    |    |      + addr_x = 0
li cond_add=al waddr_add=VPM_DMA_LOAD_SETUP_16_RA imm=`0b_1_000_0011_0000_0000_0001_0__0_010000_0000`

;                                                         + DMA load setup
;                                                         | + width = 32bit
;                                                         | |   + mpitch = 8 * 2 ^ 3 = 64 = 16 * (32 / 8)
;                                                         | |   |    + rowlen = 16
;                                                         | |   |    |    + nrows = 16
;                                                         | |   |    |    |    + vpitch = 1
;                                                         | |   |    |    |    |    + 0:horiz 1:vert
;                                                         | |   |    |    |    |    |    + addr_y = 32
;                                                         | |   |    |    |    |    |    |      + addr_x = 0
li cond_add=al waddr_add=VPM_DMA_LOAD_SETUP_32_RA imm=`0b_1_000_0011_0000_0000_0001_0__0_100000_0000` cond_mul=al waddr_mul=VPM_DMA_LOAD_SETUP_32_RB

;                                                         + DMA store setup
;                                                         |  + units = 32
;                                                         |  |       + depth = 16
;                                                         |  |       |         + 0:vert 1:horiz
;                                                         |  |       |         |  + vpmbase_y = 0
;                                                         |  |       |         |  |       + vpmbase_x = 0
;                                                         |  |       |         |  |       |     + width = 32bit
li cond_add=al waddr_add=VPM_DMA_STORE_SETUP_0_RA imm=`0b_10_0100000_0010000_0_1__0000000_0000__000`

;                                                          + DMA store setup
;                                                          |  + units = 32
;                                                          |  |       + depth = 16
;                                                          |  |       |         + 0:vert 1:horiz
;                                                          |  |       |         |  + vpmbase_y = 16
;                                                          |  |       |         |  |       + vpmbase_x = 0
;                                                          |  |       |         |  |       |     + width = 32bit
li cond_add=al waddr_add=VPM_DMA_STORE_SETUP_16_RA imm=`0b_10_0100000_0010000_0_1__0010000_0000__000`

;                                                          + DMA store setup
;                                                          |  + units = 32
;                                                          |  |       + depth = 16
;                                                          |  |       |         + 0:vert 1:horiz
;                                                          |  |       |         |  + vpmbase_y = 32
;                                                          |  |       |         |  |       + vpmbase_x = 0
;                                                          |  |       |         |  |       |     + width = 32bit
li cond_add=al waddr_add=VPM_DMA_STORE_SETUP_32_RA imm=`0b_10_0100000_0010000_0_1__0100000_0000__000`

;                                                     + VPM write setup
;                                                     |               + stride = 1
;                                                     |               |      + 0:vert 1:horiz
;                                                     |               |      |   + size = 32bit
;                                                     |               |      |   |      + addr_y = 0
li cond_add=al waddr_add=VPM_WRITE_SETUP_0_RA imm=`0b_00_000000000000_000001_1_0_10__00_000000`

;                                                      + VPM write setup
;                                                      |               + stride = 1
;                                                      |               |      + 0:vert 1:horiz
;                                                      |               |      |   + size = 32bit
;                                                      |               |      |   |      + addr_y = 16
li cond_add=al waddr_add=VPM_WRITE_SETUP_16_RA imm=`0b_00_000000000000_000001_1_0_10__00_010000`

;                                                      + VPM write setup
;                                                      |               + stride = 1
;                                                      |               |      + 0:vert 1:horiz
;                                                      |               |      |   + size = 32bit
;                                                      |               |      |   |      + addr_y = 32
li cond_add=al waddr_add=VPM_WRITE_SETUP_32_RA imm=`0b_00_000000000000_000001_1_0_10__00_100000`


;                                                + DMA store stride setup
;                                                |                + blockmode = 0
;                                                |                |     + stride = 0
li cond_mul=al waddr_mul=vpmvcd_wr_setup imm=`0b_11_0000000000000_0_000_0000000000000`


; #init-1
; Load: y = 0
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_0_RA add_a=ra add_b=ra
; vpm_ld_addr = MEM_SRC_RB
;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
; Load: y = 16
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_16_RA add_a=ra add_b=ra
; Write: y = 0
alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_WRITE_SETUP_0_RA add_a=ra add_b=ra
; Wait for DMA Load
alu cond_add=al op_add=or raddr_a=vpm_ld_wait add_a=ra add_b=ra


; #init-2
; Read: y = 0
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_0_RA add_a=ra add_b=ra
; vpm_ld_addr = MEM_SRC_RB
;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
; vpm_write = abs of vpm_read
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
; Load: y = 32
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_32_RA add_a=ra add_b=ra
; Store: y = 0
alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_DMA_STORE_SETUP_0_RA add_a=ra add_b=ra
; Wait for DMA Load
alu cond_add=al op_add=or raddr_a=vpm_ld_wait add_a=ra add_b=ra


; #init-3
; Read: y = 16
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_16_RA add_a=ra add_b=ra
; vpm_ld_addr = MEM_SRC_RB
;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
; vpm_st_addr = MEM_DST_RA
;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
; vpm_write = abs of vpm_read
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
; Load: y = 0
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_0_RA add_a=ra add_b=ra
; Store: y = 16
alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_DMA_STORE_SETUP_16_RA add_a=ra add_b=ra
; Wait for DMA Load and Store
alu cond_add=al op_add=or raddr_a=vpm_ld_wait raddr_b=vpm_st_wait add_a=ra add_b=rb


:loop

    ; #main-1
    ; Read: y = 32
    alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_32_RA add_a=ra add_b=ra
    ; vpm_ld_addr = MEM_SRC_RB
    ;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
    ; vpm_st_addr = MEM_DST_RA
    ;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
    ; vpm_write = abs of vpm_read
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    ; Load: y = 16
    alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_16_RA add_a=ra add_b=ra
    ; Store: y = 32
    alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_DMA_STORE_SETUP_32_RA add_a=ra add_b=ra
    ; Write: y = 0
    alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_WRITE_SETUP_0_RA add_a=ra add_b=ra
    ; Wait for DMA Load and Store
    alu cond_add=al op_add=or raddr_a=vpm_ld_wait raddr_b=vpm_st_wait add_a=ra add_b=rb


    ; #main-2
    ; Read: y = 0
    alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_0_RA add_a=ra add_b=ra
    ; vpm_ld_addr = MEM_SRC_RB
    ;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
    ; vpm_st_addr = MEM_DST_RA
    ;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
    ; vpm_write = abs of vpm_read
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    ; Load: y = 32
    ;  and TMP0_R = N_RA
    alu cond_add=al cond_mul=al op_add=or op_mul=v8min waddr_add=vpmvcd_rd_setup waddr_mul=TMP0_R raddr_a=N_RA raddr_b=VPM_DMA_LOAD_SETUP_32_RB add_a=rb add_b=rb mul_a=ra mul_b=ra
    ; Store: y = 0
    ;  and N_RA = N_RA - 1 = TMP0_R - 1
    ;  and set flags on N_RA - 1
    alu cond_add=al cond_mul=al op_add=sub op_mul=v8min sf=1 waddr_add=N_RA waddr_mul=vpmvcd_wr_setup raddr_a=VPM_DMA_STORE_SETUP_0_RA sig=simm simm=1 add_a=TMP0_R add_b=rb mul_a=ra mul_b=ra
    ; Wait for DMA Load and Store
    alu cond_add=al op_add=or raddr_a=vpm_ld_wait raddr_b=vpm_st_wait add_a=ra add_b=rb


    ; #main-3
    ; Read: y = 16
    alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_16_RA add_a=ra add_b=ra
    ; vpm_ld_addr = MEM_SRC_RB
    ;  and MEM_SRC_RB = MEM_SRC_RB + 16 * 16 * 4 = MEM_SRC_RB + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_SRC_RB waddr_mul=vpm_ld_addr ws=1 raddr_a=C_1024_RA raddr_b=MEM_SRC_RB add_a=ra add_b=rb mul_a=rb mul_b=rb
    ; vpm_st_addr = MEM_DST_RA
    ;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
    alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
    ; vpm_write = abs of vpm_read
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
    alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra

    bra cond_br=anyzc rel=1 imm=:loop
    ; 3 delay slots {
        ; Load: y = 0
        alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_DMA_LOAD_SETUP_0_RA add_a=ra add_b=ra
        ; Store: y = 16
        alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_DMA_STORE_SETUP_16_RA add_a=ra add_b=ra
        ; Wait for DMA Load and Store
        alu cond_add=al op_add=or raddr_a=vpm_ld_wait raddr_b=vpm_st_wait add_a=ra add_b=rb
    ; }

; #fin-1
; Read: y = 32
alu cond_add=al op_add=or waddr_add=vpmvcd_rd_setup raddr_a=VPM_WRITE_SETUP_32_RA add_a=ra add_b=ra
; vpm_st_addr = MEM_DST_RA
;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
; vpm_write = abs of vpm_read
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
alu cond_add=al op_add=fminabs waddr_add=vpm_write raddr_a=vpm_read add_a=ra add_b=ra
; Store: y = 32
alu cond_add=al op_add=or waddr_add=vpmvcd_wr_setup ws=1 raddr_a=VPM_DMA_STORE_SETUP_32_RA add_a=ra add_b=ra
; Wait for DMA Store
alu cond_add=al op_add=or raddr_b=vpm_st_wait add_a=rb add_b=rb

; #fin-2
; vpm_st_addr = MEM_DST_RA
;  and MEM_DST_RA = MEM_DST_RA + 16 * 16 * 4 = MEM_DST_RA + 1024
alu cond_add=al cond_mul=al op_add=add op_mul=v8min waddr_add=MEM_DST_RA waddr_mul=vpm_st_addr raddr_a=MEM_DST_RA raddr_b=C_1024_RB add_a=ra add_b=rb mul_a=ra mul_b=ra
; Wait for DMA Store
;  and trigger an interrupt
alu cond_add=al op_add=or waddr_add=host_int raddr_a=C_1024_RA raddr_b=vpm_st_wait add_a=ra add_b=rb

alu sig=pe
alu
alu

; Stats:
;  [R_CNT] = R_CNT
;  [RA_CNT] = RA_CNT
;  [RB_CNT] = RB_CNT
